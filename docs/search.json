[{"path":"https://tengmcing.github.io/autovi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 autovi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tengmcing.github.io/autovi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer, copyright holder.","code":""},{"path":"https://tengmcing.github.io/autovi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2024). “Auto Visual Inference Computer Vision Models.” https://CRAN.R-project.org/package=autovi.","code":"@Misc{,   author = {Weihao Li},   title = {Auto Visual Inference with Computer Vision Models},   year = {2024},   url = {https://CRAN.R-project.org/package=autovi}, }"},{"path":"https://tengmcing.github.io/autovi/index.html","id":"autovi","dir":"","previous_headings":"","what":"Auto Visual Inference with Computer Vision Models","title":"Auto Visual Inference with Computer Vision Models","text":"Buja et al. (2009) provides inferential framework assess whether residual plots indeed contain visual patterns inconsistent model assumptions. However, unlike conventional statistical tests can performed computationally statistical software, lineup protocol requires human evaluation images. characteristic makes less suitable large-scale applications, given associated high labour costs time requirements. autovi package aims offer tools automated visual inference residual plots. Currently, supports diagnostic checks classical normal linear regression models (CNLRM), underlying computer vision models specifically trained model class. However, autovi API designed extensible model types. means can obtain predictions long provide appropriate method generating null residuals null_method argument.","code":""},{"path":"https://tengmcing.github.io/autovi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Auto Visual Inference with Computer Vision Models","text":"Install released version CRAN Install development version GitHub :","code":"install.packages(\"autovi\") # install.packages(\"remotes\") remotes::install_github(\"TengMCing/autovi\")"},{"path":"https://tengmcing.github.io/autovi/index.html","id":"trained-keras-models","dir":"","previous_headings":"","what":"Trained Keras Models","title":"Auto Visual Inference with Computer Vision Models","text":"available trained Keras models listed list_keras_model(). trained Keras models listed predict visual signal strength visual patterns input residual plot. visual signal strength essentially approximation Kullback–Leibler divergence based distance metric quantifies difference actual residual distribution reference residual distribution assumed correct model specification. Details methodologies provided Chapter 3 Patrick Li’s PhD thesis. Different Keras models trained residual plots obtained different linear regression models violating various model assumptions. vss_32, vss_64 vss_128 trained residual plots containing visual patterns indicating non-linearity heteroskedasticity issues. number model name represents size input image. instance, 32 means input image 32 × 32 pixels. vss_phn_32, vss_phn_64 vss_phn_128 also trained residual plots containing visual patterns indicating non-linearity heteroskedasticity, visual patterns complex. Additionally, residual plots visual patterns non-normality also used models.","code":"library(tidyverse) library(autovi) list_keras_model() %>% pull(model_name) #> [1] \"vss_32\"      \"vss_64\"      \"vss_128\"     \"vss_phn_32\"  \"vss_phn_64\"  #> [6] \"vss_phn_128\""},{"path":"https://tengmcing.github.io/autovi/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Auto Visual Inference with Computer Vision Models","text":"example, using vss_phn_32 Keras model. model can obtained using get_keras_model(). illustrate use package, define incorrectly specified model omitting certain higher-order terms x. residual plot fitted model shows “S” shape indicating non-linearity issue.  run diagnostics fitted model, can initialize checker using auto_vi() look input residual plot using plot_resid() method.  predict visual signal strength residual plot, simply use vss() method. visual signal strength residual plot usually insufficient determine model correctly specified. Thus, need evaluate null residual plots comparison. checker includes default method generate null residuals consistent null hypothesis fitted model correctly specified, rotate_resid() method implementing residual rotation technique. method suitable CNLRM.  get predictions null residual plots, one can use null_vss() method. keep_null_data keep_null_plot tells method whether preserve null residuals null residuals plots result. models needs use null generating method rotate_resid(), function can provided via null_method argument. parameter provided function fitted_model, fitted model object. return data frame two columns .fitted .resid fitted values null residuals respectively. want measure variation visual signal strength residual plot, can use boot_vss() method get bootstrapped visual signal strength. method resamples observations replacement refit regression model. Similarly, keep_boot_data keep_boot_plot tells method whether preserve bootstrapped residuals plots. run comprehensive check including analysis null residuals bootstrapped residuals, use check() method. check result stored check_result attribute. print checker object, show brief summary result. summary plot can drawn summary_plot() method. solid line 95% sample quantile visual signal strength predicted null residual plots. dot line visual signal strength predicted original residual plot. blue density curve indicates distribution visual signal strength predicted null residual plots. red density curve indicates distribution visual signal strength predicted bootstrapped residual plots. p-value obtained computing ratio null visual signal strength greater equal observed visual signal strength. red area along solid line indicates often fitted model considered incorrectly specified data can repetitively drawn data generating process. example, H0 rejected small p-value. can also observed almost time refitted models considered incorrectly specified, clear rejection. Furthermore, since two density curves different , unlikely original residuals distribution null residuals.","code":"keras_model <- get_keras_model(\"vss_phn_32\") set.seed(2024) x <- rnorm(300) y <- 1 + x + x^2 + x^3 + rnorm(300, sd = 3) this_model <- lm(y ~ x) ggplot() +   geom_point(aes(this_model$fitted.values, this_model$residuals)) +   xlab(\"Fitted values\") +   ylab(\"Residuals\") checker <- auto_vi(fitted_model = this_model, keras_model = keras_model) checker$plot_resid() checker$vss() #> ✔ Predict visual signal strength for 1 image. #> # A tibble: 1 × 1 #>     vss #>   <dbl> #> 1  4.46 checker$rotate_resid() %>%   checker$plot_resid() checker$null_vss(20L,                   keep_null_data = FALSE,                   keep_null_plot = FALSE) #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 20 images. #> # A tibble: 20 × 1 #>      vss #>    <dbl> #>  1 1.17  #>  2 1.09  #>  3 1.17  #>  4 0.773 #>  5 1.24  #>  6 0.640 #>  7 0.873 #>  8 1.06  #>  9 1.00  #> 10 1.01  #> 11 3.03  #> 12 1.15  #> 13 1.08  #> 14 0.910 #> 15 1.10  #> 16 0.913 #> 17 0.848 #> 18 1.08  #> 19 0.911 #> 20 0.665 checker$boot_vss(20L,                   keep_boot_data = FALSE,                   keep_boot_plot = FALSE) #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 20 images. #> # A tibble: 20 × 1 #>      vss #>    <dbl> #>  1  4.20 #>  2  4.68 #>  3  5.56 #>  4  4.15 #>  5  4.37 #>  6  5.28 #>  7  4.36 #>  8  4.12 #>  9  4.70 #> 10  4.03 #> 11  4.11 #> 12  4.16 #> 13  5.09 #> 14  4.54 #> 15  3.83 #> 16  4.31 #> 17  4.72 #> 18  5.33 #> 19  4.85 #> 20  4.08 checker$check(null_draws = 20L, boot_draws = 20L) #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 20 images. #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 20 images. #> ✔ Predict visual signal strength for 1 image. checker #>  #> ── <AUTO_VI object> #> Status: #>  - Fitted model: lm #>  - Keras model: (None, 32, 32, 3) + (None, 5) -> (None, 1) #>     - Output node index: 1 #>  - Result: #>     - Observed visual signal strength: 4.461 (p-value = 0) #>     - Null visual signal strength: [20 draws] #>        - Mean: 1.14 #>        - Quantiles:  #>           ╔═════════════════════════════════════════════════╗ #>           ║   25%    50%    75%    80%    90%    95%    99% ║ #>           ║0.8896 1.0072 1.1204 1.2076 1.3012 1.5755 3.3615 ║ #>           ╚═════════════════════════════════════════════════╝ #>     - Bootstrapped visual signal strength: [20 draws] #>        - Mean: 4.445 (p-value = 0) #>        - Quantiles:  #>           ╔══════════════════════════════════════════╗ #>           ║  25%   50%   75%   80%   90%   95%   99% ║ #>           ║4.162 4.395 4.789 4.905 5.185 5.292 5.293 ║ #>           ╚══════════════════════════════════════════╝ #>     - Likelihood ratio: 0.7295 (boot) / 5.232e-14 (null) = 1.394e+13 checker$summary_plot()"},{"path":"https://tengmcing.github.io/autovi/index.html","id":"feature-extraction","dir":"","previous_headings":"Examples","what":"Feature extraction","title":"Auto Visual Inference with Computer Vision Models","text":"package also enables extraction features keras model purposes. extract features specific layer keras model, one needs provide argument extract_feature_from_layer. following code chunk extract features global pooling layer keras model. check available layer names, one can list KERAS_WRAPPER class. running comprehensive check check() method, one can provide extract_feature_from_layer argument extract features. features also stored check_result attribute. package provide ways conduct PCA features. feature_pca method combine features obtained prediction observed residual plot, null residual plots, bootstrapped residual plots, conduct PCA . results rotated features. variable set provides set label observation, can either “observed”, “null” “boot”.","code":"checker$vss(extract_feature_from_layer = \"global_max_pooling2d\") %>%   names() #> ✔ Predict visual signal strength for 1 image. #>   [1] \"vss\"   \"f_1\"   \"f_2\"   \"f_3\"   \"f_4\"   \"f_5\"   \"f_6\"   \"f_7\"   \"f_8\"   #>  [10] \"f_9\"   \"f_10\"  \"f_11\"  \"f_12\"  \"f_13\"  \"f_14\"  \"f_15\"  \"f_16\"  \"f_17\"  #>  [19] \"f_18\"  \"f_19\"  \"f_20\"  \"f_21\"  \"f_22\"  \"f_23\"  \"f_24\"  \"f_25\"  \"f_26\"  #>  [28] \"f_27\"  \"f_28\"  \"f_29\"  \"f_30\"  \"f_31\"  \"f_32\"  \"f_33\"  \"f_34\"  \"f_35\"  #>  [37] \"f_36\"  \"f_37\"  \"f_38\"  \"f_39\"  \"f_40\"  \"f_41\"  \"f_42\"  \"f_43\"  \"f_44\"  #>  [46] \"f_45\"  \"f_46\"  \"f_47\"  \"f_48\"  \"f_49\"  \"f_50\"  \"f_51\"  \"f_52\"  \"f_53\"  #>  [55] \"f_54\"  \"f_55\"  \"f_56\"  \"f_57\"  \"f_58\"  \"f_59\"  \"f_60\"  \"f_61\"  \"f_62\"  #>  [64] \"f_63\"  \"f_64\"  \"f_65\"  \"f_66\"  \"f_67\"  \"f_68\"  \"f_69\"  \"f_70\"  \"f_71\"  #>  [73] \"f_72\"  \"f_73\"  \"f_74\"  \"f_75\"  \"f_76\"  \"f_77\"  \"f_78\"  \"f_79\"  \"f_80\"  #>  [82] \"f_81\"  \"f_82\"  \"f_83\"  \"f_84\"  \"f_85\"  \"f_86\"  \"f_87\"  \"f_88\"  \"f_89\"  #>  [91] \"f_90\"  \"f_91\"  \"f_92\"  \"f_93\"  \"f_94\"  \"f_95\"  \"f_96\"  \"f_97\"  \"f_98\"  #> [100] \"f_99\"  \"f_100\" \"f_101\" \"f_102\" \"f_103\" \"f_104\" \"f_105\" \"f_106\" \"f_107\" #> [109] \"f_108\" \"f_109\" \"f_110\" \"f_111\" \"f_112\" \"f_113\" \"f_114\" \"f_115\" \"f_116\" #> [118] \"f_117\" \"f_118\" \"f_119\" \"f_120\" \"f_121\" \"f_122\" \"f_123\" \"f_124\" \"f_125\" #> [127] \"f_126\" \"f_127\" \"f_128\" \"f_129\" \"f_130\" \"f_131\" \"f_132\" \"f_133\" \"f_134\" #> [136] \"f_135\" \"f_136\" \"f_137\" \"f_138\" \"f_139\" \"f_140\" \"f_141\" \"f_142\" \"f_143\" #> [145] \"f_144\" \"f_145\" \"f_146\" \"f_147\" \"f_148\" \"f_149\" \"f_150\" \"f_151\" \"f_152\" #> [154] \"f_153\" \"f_154\" \"f_155\" \"f_156\" \"f_157\" \"f_158\" \"f_159\" \"f_160\" \"f_161\" #> [163] \"f_162\" \"f_163\" \"f_164\" \"f_165\" \"f_166\" \"f_167\" \"f_168\" \"f_169\" \"f_170\" #> [172] \"f_171\" \"f_172\" \"f_173\" \"f_174\" \"f_175\" \"f_176\" \"f_177\" \"f_178\" \"f_179\" #> [181] \"f_180\" \"f_181\" \"f_182\" \"f_183\" \"f_184\" \"f_185\" \"f_186\" \"f_187\" \"f_188\" #> [190] \"f_189\" \"f_190\" \"f_191\" \"f_192\" \"f_193\" \"f_194\" \"f_195\" \"f_196\" \"f_197\" #> [199] \"f_198\" \"f_199\" \"f_200\" \"f_201\" \"f_202\" \"f_203\" \"f_204\" \"f_205\" \"f_206\" #> [208] \"f_207\" \"f_208\" \"f_209\" \"f_210\" \"f_211\" \"f_212\" \"f_213\" \"f_214\" \"f_215\" #> [217] \"f_216\" \"f_217\" \"f_218\" \"f_219\" \"f_220\" \"f_221\" \"f_222\" \"f_223\" \"f_224\" #> [226] \"f_225\" \"f_226\" \"f_227\" \"f_228\" \"f_229\" \"f_230\" \"f_231\" \"f_232\" \"f_233\" #> [235] \"f_234\" \"f_235\" \"f_236\" \"f_237\" \"f_238\" \"f_239\" \"f_240\" \"f_241\" \"f_242\" #> [244] \"f_243\" \"f_244\" \"f_245\" \"f_246\" \"f_247\" \"f_248\" \"f_249\" \"f_250\" \"f_251\" #> [253] \"f_252\" \"f_253\" \"f_254\" \"f_255\" \"f_256\" KERAS_WRAPPER$list_layer_name(keras_model) #>  [1] \"input_1\"                  \"tf.__operators__.getitem\" #>  [3] \"tf.nn.bias_add\"           \"grey_scale\"               #>  [5] \"block1_conv1\"             \"batch_normalization\"      #>  [7] \"activation\"               \"block1_conv2\"             #>  [9] \"batch_normalization_1\"    \"activation_1\"             #> [11] \"block1_pool\"              \"dropout\"                  #> [13] \"block2_conv1\"             \"batch_normalization_2\"    #> [15] \"activation_2\"             \"block2_conv2\"             #> [17] \"batch_normalization_3\"    \"activation_3\"             #> [19] \"block2_pool\"              \"dropout_1\"                #> [21] \"block3_conv1\"             \"batch_normalization_4\"    #> [23] \"activation_4\"             \"block3_conv2\"             #> [25] \"batch_normalization_5\"    \"activation_5\"             #> [27] \"block3_conv3\"             \"batch_normalization_6\"    #> [29] \"activation_6\"             \"block3_pool\"              #> [31] \"dropout_2\"                \"block4_conv1\"             #> [33] \"batch_normalization_7\"    \"activation_7\"             #> [35] \"block4_conv2\"             \"batch_normalization_8\"    #> [37] \"activation_8\"             \"block4_conv3\"             #> [39] \"batch_normalization_9\"    \"activation_9\"             #> [41] \"block4_pool\"              \"dropout_3\"                #> [43] \"block5_conv1\"             \"batch_normalization_10\"   #> [45] \"activation_10\"            \"block5_conv2\"             #> [47] \"batch_normalization_11\"   \"activation_11\"            #> [49] \"block5_conv3\"             \"batch_normalization_12\"   #> [51] \"activation_12\"            \"block5_pool\"              #> [53] \"dropout_4\"                \"global_max_pooling2d\"     #> [55] \"additional_input\"         \"concatenate\"              #> [57] \"dense\"                    \"dropout_5\"                #> [59] \"activation_13\"            \"dense_1\" checker$check(null_draws = 20L, boot_draws = 20L, extract_feature_from_layer = \"global_max_pooling2d\") #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 20 images. #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 20 images. #> ✔ Predict visual signal strength for 1 image. checker$check_result$observed #> # A tibble: 1 × 257 #>     vss   f_1    f_2   f_3   f_4   f_5     f_6    f_7   f_8    f_9  f_10  f_11 #>   <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1  4.46 0.167 0.0687     0     0     0 0.00164 0.0695     0 0.0847     0     0 #> # ℹ 245 more variables: f_12 <dbl>, f_13 <dbl>, f_14 <dbl>, f_15 <dbl>, #> #   f_16 <dbl>, f_17 <dbl>, f_18 <dbl>, f_19 <dbl>, f_20 <dbl>, f_21 <dbl>, #> #   f_22 <dbl>, f_23 <dbl>, f_24 <dbl>, f_25 <dbl>, f_26 <dbl>, f_27 <dbl>, #> #   f_28 <dbl>, f_29 <dbl>, f_30 <dbl>, f_31 <dbl>, f_32 <dbl>, f_33 <dbl>, #> #   f_34 <dbl>, f_35 <dbl>, f_36 <dbl>, f_37 <dbl>, f_38 <dbl>, f_39 <dbl>, #> #   f_40 <dbl>, f_41 <dbl>, f_42 <dbl>, f_43 <dbl>, f_44 <dbl>, f_45 <dbl>, #> #   f_46 <dbl>, f_47 <dbl>, f_48 <dbl>, f_49 <dbl>, f_50 <dbl>, f_51 <dbl>, … checker$feature_pca() #> # A tibble: 41 × 298 #>      f_1    f_2   f_3   f_4   f_5     f_6    f_7   f_8    f_9  f_10  f_11  f_12 #>    <dbl>  <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 0.167 0.0687  0     0    0     0.00164 0.0695 0     0.0847 0     0     0.149 #>  2 1.08  4.14    4.10  5.43 2.35  2.04    3.09   2.39  2.01   1.94  4.32  2.43  #>  3 1.10  2.85    2.90  3.08 1.20  1.21    1.69   1.50  1.59   0.828 2.55  1.75  #>  4 0.827 3.20    2.92  3.45 1.50  1.28    1.89   1.61  1.64   1.28  2.66  1.71  #>  5 0.955 3.85    3.74  5.17 2.24  1.97    2.96   2.25  1.81   1.91  4.04  2.23  #>  6 1.22  3.60    3.70  4.70 2.00  1.72    2.66   2.19  1.77   1.57  3.83  2.18  #>  7 1.21  3.41    3.51  4.22 1.75  1.58    2.37   1.99  1.75   1.33  3.47  2.08  #>  8 1.09  3.00    3.04  3.71 1.53  1.40    2.12   1.76  1.53   1.16  3.01  1.85  #>  9 1.02  2.87    2.84  3.42 1.42  1.28    1.94   1.65  1.45   1.09  2.75  1.70  #> 10 0.570 1.72    1.25  1.36 0.270 0.342   0.419  0.545 0.959  0.267 0.913 0.875 #> # ℹ 31 more rows #> # ℹ 286 more variables: f_13 <dbl>, f_14 <dbl>, f_15 <dbl>, f_16 <dbl>, #> #   f_17 <dbl>, f_18 <dbl>, f_19 <dbl>, f_20 <dbl>, f_21 <dbl>, f_22 <dbl>, #> #   f_23 <dbl>, f_24 <dbl>, f_25 <dbl>, f_26 <dbl>, f_27 <dbl>, f_28 <dbl>, #> #   f_29 <dbl>, f_30 <dbl>, f_31 <dbl>, f_32 <dbl>, f_33 <dbl>, f_34 <dbl>, #> #   f_35 <dbl>, f_36 <dbl>, f_37 <dbl>, f_38 <dbl>, f_39 <dbl>, f_40 <dbl>, #> #   f_41 <dbl>, f_42 <dbl>, f_43 <dbl>, f_44 <dbl>, f_45 <dbl>, f_46 <dbl>, …"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — AUTO_VI$..init..","title":"Initialization method — AUTO_VI$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..init...html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization method — AUTO_VI$..init..","text":"","code":"AUTO_VI$..init..(fitted_model, keras_model = NULL, data = NULL, node_index = 1L)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — AUTO_VI$..init..","text":"fitted_model Model. model object, e.g. lm. keras_model Keras model. trained computer vision model. data Data frame. data used fit model. node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — AUTO_VI$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — AUTO_VI$..init..","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi #>  #> ── <AUTO_VI object> #> Status: #>  - Fitted model: lm #>  - Keras model: UNKNOWN #>     - Output node index: 1 #>  - Result: UNKNOWN"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — AUTO_VI$..str..","title":"String representation of the object — AUTO_VI$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..str...html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String representation of the object — AUTO_VI$..str..","text":"","code":"AUTO_VI$..str..()"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — AUTO_VI$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — AUTO_VI$..str..","text":"","code":"AUTO_VI$..str..() #> [1] \"<AUTO_VI class>\"  my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$..str..() #> [1] \"<AUTO_VI object>\\n Status:\\n  - Fitted model: lm\\n  - Keras model: UNKNOWN\\n     - Output node index: 1\\n  - Result: UNKNOWN\""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-auxiliary.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute auxiliary variables for the keras model — AUTO_VI$auxiliary","title":"Compute auxiliary variables for the keras model — AUTO_VI$auxiliary","text":"function computes auxiliary variables including monotonic measure (measure_monotonic), sparse measure (measure_sparse), splines measure (measure_splines), striped measure (measure_striped), number observation (n). Scagnostics computed using cassowaryr::sc_monotonic(), cassowaryr::sc_sparse2(), cassowaryr::sc_splines(), cassowaryr::sc_striped(). wish calculate additional auxiliary variables keras model, please override method. Ensure accepts data frame columns named .fitted .resid input returns single row tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-auxiliary.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute auxiliary variables for the keras model — AUTO_VI$auxiliary","text":"","code":"AUTO_VI$auxiliary(data = seflf$get_fitted_and_resid())"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-auxiliary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute auxiliary variables for the keras model — AUTO_VI$auxiliary","text":"data Data frame. data frame containing variables .resid .fitted. See also AUTO_VI$get_fitted_and_resid().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-auxiliary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute auxiliary variables for the keras model — AUTO_VI$auxiliary","text":"tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-auxiliary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute auxiliary variables for the keras model — AUTO_VI$auxiliary","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$auxiliary() #> # A tibble: 1 × 5 #>   measure_monotonic measure_sparse measure_splines measure_striped     n #>               <dbl>          <dbl>           <dbl>           <dbl> <int> #> 1             0.154          0.523           0.176             0.6    50"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bootstrapped residuals from a fitted model — AUTO_VI$boot_method","title":"Get bootstrapped residuals from a fitted model — AUTO_VI$boot_method","text":"default method gets bootstrapped residuals fitted linear model sampling observations replacement refit model. User needs override method different bootstrapping scheme needed.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_method.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bootstrapped residuals from a fitted model — AUTO_VI$boot_method","text":"","code":"AUTO_VI$boot_method(   fitted_model = self$fitted_model,   data = self$get_data() )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bootstrapped residuals from a fitted model — AUTO_VI$boot_method","text":"fitted_model lm. linear model object. data Data frame. data used fit model. See also AUTO_VI$get_data().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get bootstrapped residuals from a fitted model — AUTO_VI$boot_method","text":"tibble two columns .fitted .resid.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get bootstrapped residuals from a fitted model — AUTO_VI$boot_method","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) null_resid <- my_vi$boot_method() my_vi$plot_resid(null_resid)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_vss.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict visual signal strength for bootstrapped residual plots — AUTO_VI$boot_vss","title":"Predict visual signal strength for bootstrapped residual plots — AUTO_VI$boot_vss","text":"function bootstrap data refits model using AUTO_VI$boot_method(), predicts visual signal strength bootstrapped residual plots.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_vss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict visual signal strength for bootstrapped residual plots — AUTO_VI$boot_vss","text":"","code":"AUTO_VI$boot_vss(   draws = 100L,   fitted_model = self$fitted_model,   keras_model = self$keras_model,   data = self$get_data(),   node_index = 1L,   keep_boot_data = FALSE,   keep_boot_plot = FALSE,   extract_feature_from_layer = NULL )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_vss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict visual signal strength for bootstrapped residual plots — AUTO_VI$boot_vss","text":"draws Integer. Number simulation draws. fitted_model Model. model object, e.g. lm. keras_model Keras model. trained computer vision model. data Data frame. data used fit model. See also AUTO_VI$get_data(). node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. keep_boot_data Boolean. Whether keep bootstrapped data. keep_boot_plot Boolean. Whether keep bootstrapped plots. extract_feature_from_layer Character/Integer. layer name integer layer index extracting features layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_vss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict visual signal strength for bootstrapped residual plots — AUTO_VI$boot_vss","text":"tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-boot_vss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict visual signal strength for bootstrapped residual plots — AUTO_VI$boot_vss","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$boot_vss() } #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> Warning: Problem in area computation (Returns NA) #> Computing auxiliary inputs ■■■■■■■■■■■■                      37% | ETA:  2s #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% | ETA:  0s #> Warning: shull: complete hull invisible, data scaling error, will retry with some jitter #> Warning: no non-missing arguments to min; returning Inf #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■       86% | ETA:  0s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> # A tibble: 100 × 1 #>      vss #>    <dbl> #>  1  2.87 #>  2  2.96 #>  3  3.43 #>  4  3.23 #>  5  3.34 #>  6  3.23 #>  7  3.13 #>  8  3.00 #>  9  3.34 #> 10  1.69 #> # ℹ 90 more rows"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-check.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct a auto visual inference check with a computer vision model — AUTO_VI$check","title":"Conduct a auto visual inference check with a computer vision model — AUTO_VI$check","text":"function conducts visual inference check computer vision model. result stored self$check_result.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-check.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct a auto visual inference check with a computer vision model — AUTO_VI$check","text":"","code":"AUTO_VI$check(   null_draws = 100L,   boot_draws = 100L,   fitted_model = self$fitted_model,   keras_model = self$keras_model,   null_method = self$null_method,   data = self$get_data(),   node_index = self$node_index,   keep_data = FALSE,   keep_plot = FALSE,   extract_feature_from_layer = NULL )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct a auto visual inference check with a computer vision model — AUTO_VI$check","text":"null_draws Integer. Number simulation draws AUTO_VI$null_vss(). boot_draws Integer. Number simulation draws AUTO_VI$boot_vss(). fitted_model Model. model object, e.g. lm. keras_model Keras model. trained computer vision model. null_method Function. method simulate residuals null hypothesis distribution. lm, recommended method residual rotation AUTO_VI$rotate_resid(). data Data frame. data used fit model. See also AUTO_VI$get_data(). node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. keep_data Boolean. Whether keep simulated data. keep_plot Boolean. Whether keep simulated plots. extract_feature_from_layer Character/Integer. layer name integer layer index extracting features layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct a auto visual inference check with a computer vision model — AUTO_VI$check","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct a auto visual inference check with a computer vision model — AUTO_VI$check","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$check()   myvi } #> ✔ Generate null data. #> ✔ Generate null plots. #> Computing auxiliary inputs ■■■■■■■■■■■■                      37% | ETA:  2s #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■                       32% | ETA:  2s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> Computing auxiliary inputs ■■■■■■■■■■■■■                     41% | ETA:  1s #> Warning: shull: complete hull invisible, data scaling error, will retry with some jitter #> Warning: Problem in area computation (Returns NA) #> Warning: Problem in area computation (Returns NA) #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     94% | ETA:  0s #> Warning: no non-missing arguments to min; returning Inf #> Warning: shull: complete hull invisible, data scaling error, will retry with some jitter #> Warning: Problem in area computation (Returns NA) #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■       85% | ETA:  1s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> ✔ Predict visual signal strength for 1 image. #>  #> ── <AUTO_VI object> #> Status: #>  - Fitted model: lm #>  - Keras model: (None, 32, 32, 3) + (None, 5) -> (None, 1) #>     - Output node index: 1 #>  - Result: #>     - Observed visual signal strength: 3.162 (p-value = 0.0297) #>     - Null visual signal strength: [100 draws] #>        - Mean: 1.452 #>        - Quantiles:  #>           ╔═════════════════════════════════════════════════╗ #>           ║   25%    50%    75%    80%    90%    95%    99% ║ #>           ║0.8456 1.2558 1.7724 1.9100 2.4479 2.7168 3.9656 ║ #>           ╚═════════════════════════════════════════════════╝ #>     - Bootstrapped visual signal strength: [100 draws] #>        - Mean: 2.71 (p-value = 0.07921) #>        - Quantiles:  #>           ╔══════════════════════════════════════════╗ #>           ║  25%   50%   75%   80%   90%   95%   99% ║ #>           ║2.401 2.854 3.185 3.217 3.437 3.580 3.717 ║ #>           ╚══════════════════════════════════════════╝ #>     - Likelihood ratio: 0.6385 (boot) / 0.04597 (null) = 13.89"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-check_result.html","id":null,"dir":"Reference","previous_headings":"","what":"List of diagnostic results — AUTO_VI$check_result","title":"List of diagnostic results — AUTO_VI$check_result","text":"list, initialized method AUTO_VI$check() run.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","title":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","text":"function conducts principal component analysis features extracted keras model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","text":"","code":"AUTO_VI$feature_pca(   feature = self$check_result$observed,   null_feature = self$check_result$null,   boot_feature = self$check_result$boot,   center = TRUE,   scale = TRUE,   pattern = \"^f_.*$\" )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","text":"feature Dataframe. data frame columns represent features rows represent observations. one row. null_feature Dataframe. data frame columns represent features rows represent observations. features extracted evaluation null plots. boot_feature Dataframe. data frame columns represent features rows represent observations. features extracted evaluation bootstrapped plots. center Boolean. Whether subtract mean feature. scale Boolean. Whether divide feature standard deviation. pattern Character. regrex pattern search features provided DataFrame. See also grep().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","text":"tibble raw features rotated features attributes sdev rotation representing standard deviation principal components rotation matrix respectively.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","text":"Features need extracted running method AUTO_VI$check() AUTO_VI$lineup_check() providing argument extract_feature_from_layer. Features zero variance ignored analysis. See also stats::prcomp(). default, features assumed follow naming convention \"f_(index)\", index one number features.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct principal component analysis for features extracted from keras model — AUTO_VI$feature_pca","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$lineup_check(extract_feature_from_layer = \"global_max_pooling2d\")   myvi$feature_pca() } #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 19 images. #> ✔ Predict visual signal strength for 1 image. #> # A tibble: 20 × 277 #>      f_1   f_2    f_3   f_4    f_5    f_6    f_7     f_8   f_9   f_10   f_11 #>    <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl>  <dbl>  <dbl> #>  1 0.151 0     0      0     0      0.0203 0.109  0.0203  0     0.0834 0      #>  2 0.278 1.42  0.742  0.891 0.0665 0.167  0.179  0.166   0.901 0.0157 0.476  #>  3 0.223 0.788 0      0.309 0      0      0      0.0249  0.556 0      0      #>  4 0.316 1.09  0.389  0.699 0.0423 0.0430 0.102  0.192   0.594 0.128  0.251  #>  5 0.370 1.35  0.837  0.861 0.0304 0.253  0.288  0.183   0.905 0      0.560  #>  6 1.07  2.18  2.28   2.31  0.771  0.941  1.26   1.18    1.26  0.390  1.97   #>  7 0.282 0.959 0.0316 0.420 0      0.0133 0      0.0702  0.533 0      0      #>  8 0.715 1.16  0.924  0.975 0.0157 0.235  0.316  0.368   0.739 0      0.718  #>  9 0.192 0.941 0.234  0.449 0      0.0303 0      0.0202  0.676 0      0.0998 #> 10 0.428 0.929 0.439  0.566 0      0.0757 0.0861 0.00817 0.678 0      0.297  #> 11 0.989 2.30  2.32   2.69  1.03   1.05   1.55   1.33    1.22  0.684  2.20   #> 12 0.784 1.52  1.33   1.33  0.225  0.443  0.533  0.596   0.894 0.0183 1.04   #> 13 0.293 0.833 0      0.395 0      0      0      0.0284  0.440 0      0      #> 14 0.732 1.72  1.44   1.46  0.334  0.451  0.615  0.676   0.964 0.200  1.11   #> 15 1.07  1.77  1.87   1.78  0.510  0.692  0.947  0.980   1.03  0.176  1.55   #> 16 1.25  2.24  2.49   2.74  1.03   1.04   1.63   1.44    1.23  0.580  2.36   #> 17 1.16  2.16  2.37   2.38  0.809  0.974  1.36   1.24    1.27  0.376  2.08   #> 18 1.19  2.46  2.68   2.64  0.931  1.09   1.49   1.35    1.45  0.478  2.29   #> 19 0.910 1.76  1.71   1.63  0.372  0.601  0.761  0.804   1.04  0.116  1.36   #> 20 0.197 0.863 0.0446 0.302 0      0      0      0       0.649 0      0      #> # ℹ 266 more variables: f_12 <dbl>, f_13 <dbl>, f_14 <dbl>, f_15 <dbl>, #> #   f_16 <dbl>, f_17 <dbl>, f_18 <dbl>, f_19 <dbl>, f_20 <dbl>, f_21 <dbl>, #> #   f_22 <dbl>, f_23 <dbl>, f_24 <dbl>, f_25 <dbl>, f_26 <dbl>, f_27 <dbl>, #> #   f_28 <dbl>, f_29 <dbl>, f_30 <dbl>, f_31 <dbl>, f_32 <dbl>, f_33 <dbl>, #> #   f_34 <dbl>, f_35 <dbl>, f_36 <dbl>, f_37 <dbl>, f_38 <dbl>, f_39 <dbl>, #> #   f_40 <dbl>, f_41 <dbl>, f_42 <dbl>, f_43 <dbl>, f_44 <dbl>, f_45 <dbl>, #> #   f_46 <dbl>, f_47 <dbl>, f_48 <dbl>, f_49 <dbl>, f_50 <dbl>, f_51 <dbl>, …"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","title":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","text":"function draws summary Plot principal component analysis conducted extracted features","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca_plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","text":"","code":"AUTO_VI$feature_pca_plot(   feature_pca = self$feature_pca(),   x = PC1,   y = PC2,   col_by_set = TRUE)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","text":"feature_pca Dataframe. data frame containing rotated features. x Symbol. x variable. See also ggplot2::tidyeval. y Symbol. y variable. See also ggplot2::tidyeval. col_by_set Boolena. Whether color points sets (observed, null, boot).","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","text":"default, visualize PC2 vs PC1. User can choose visualize principal components.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-feature_pca_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a summary Plot for principal component analysis conducted on extracted features — AUTO_VI$feature_pca_plot","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$lineup_check(extract_feature_from_layer = \"global_max_pooling2d\")   myvi$feature_pca_plot() } #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 19 images. #> ✔ Predict visual signal strength for 1 image."},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data out of a model object — AUTO_VI$get_dat","title":"Get data out of a model object — AUTO_VI$get_dat","text":"function gets data model object using stats::model.frame() self$dat NULL.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_dat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data out of a model object — AUTO_VI$get_dat","text":"","code":"AUTO_VI$get_dat(fitted_mod = self$fitted_mod)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data out of a model object — AUTO_VI$get_dat","text":"fitted_mod Model. model object, e.g. lm.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data out of a model object — AUTO_VI$get_dat","text":"tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data out of a model object — AUTO_VI$get_dat","text":"","code":"my_vi <- auto_vi(fitted_mod = lm(speed ~ dist, data = cars)) my_vi$get_dat() #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data out of a model object — AUTO_VI$get_data","title":"Get data out of a model object — AUTO_VI$get_data","text":"function gets data model object using stats::model.frame() self$data NULL.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_data.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data out of a model object — AUTO_VI$get_data","text":"","code":"AUTO_VI$get_data(fitted_model = self$fitted_model)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data out of a model object — AUTO_VI$get_data","text":"fitted_model Model. model object, e.g. lm.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data out of a model object — AUTO_VI$get_data","text":"tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data out of a model object — AUTO_VI$get_data","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$get_data() #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      7   22 #> 5      8   16 #> 6      9   10 #> 7     10   18 #> 8     10   26 #> 9     10   34 #> 10    11   17 #> 11    11   28 #> 12    12   14 #> 13    12   20 #> 14    12   24 #> 15    12   28 #> 16    13   26 #> 17    13   34 #> 18    13   34 #> 19    13   46 #> 20    14   26 #> 21    14   36 #> 22    14   60 #> 23    14   80 #> 24    15   20 #> 25    15   26 #> 26    15   54 #> 27    16   32 #> 28    16   40 #> 29    17   32 #> 30    17   40 #> 31    17   50 #> 32    18   42 #> 33    18   56 #> 34    18   76 #> 35    18   84 #> 36    19   36 #> 37    19   46 #> 38    19   68 #> 39    20   32 #> 40    20   48 #> 41    20   52 #> 42    20   56 #> 43    20   64 #> 44    22   66 #> 45    23   54 #> 46    24   70 #> 47    24   92 #> 48    24   93 #> 49    24  120 #> 50    25   85"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_fitted_and_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fitted values and residuals out of a model object — AUTO_VI$get_fitted_and_resid","title":"Get fitted values and residuals out of a model object — AUTO_VI$get_fitted_and_resid","text":"function gets fitted values residuals model object using stats::fitted() stats::resid().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_fitted_and_resid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fitted values and residuals out of a model object — AUTO_VI$get_fitted_and_resid","text":"","code":"AUTO_VI$get_fitted_and_resid(fitted_model = self$fitted_model)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_fitted_and_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fitted values and residuals out of a model object — AUTO_VI$get_fitted_and_resid","text":"fitted_model Model. model object, e.g. lm.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_fitted_and_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fitted values and residuals out of a model object — AUTO_VI$get_fitted_and_resid","text":"tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-get_fitted_and_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get fitted values and residuals out of a model object — AUTO_VI$get_fitted_and_resid","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$get_fitted_and_resid() #> # A tibble: 50 × 2 #>    .fitted  .resid #>      <dbl>   <dbl> #>  1    8.62 -4.62   #>  2    9.94 -5.94   #>  3    8.95 -1.95   #>  4   11.9  -4.93   #>  5   10.9  -2.93   #>  6    9.94 -0.940  #>  7   11.3  -1.26   #>  8   12.6  -2.59   #>  9   13.9  -3.91   #> 10   11.1  -0.0986 #> # ℹ 40 more rows"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-likelihood_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the likelihood ratio using the simulated result — AUTO_VI$likelihood_ratio","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$likelihood_ratio","text":"function estimates likelihood observing visual signal strength terms bootstrapped distribution simulated null distribution, computes ratio two likelihood.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-likelihood_ratio.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$likelihood_ratio","text":"","code":"AUTO_VI$likelihood_ratio(   vss = self$check_result$observed$vss,   dist_1 = self$check_result$boot$vss,   dist_2 = self$check_result$null$vss )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-likelihood_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$likelihood_ratio","text":"vss Numeric. observed visual signal strength. dist_1 Numeric. vector visual signal strength plots following first distribution (bootstrap distribution default). dist_2 Numeric. vector visual signal strength plots following second distribution (null distribution default).","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-likelihood_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$likelihood_ratio","text":"named vector three elements likelihood_1, likelihood_2 likelihood_ratio.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-likelihood_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$likelihood_ratio","text":"","code":"dist_1 <- rnorm(100, 0, 1) dist_2 <- rnorm(100, 1, 1) AUTO_VI$likelihood_ratio(0, dist_1, dist_2) #>     likelihood_1     likelihood_2 likelihood_ratio  #>        0.4186281        0.1843928        2.2703054"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lineup_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct a auto visual inference lineup check with a computer vision model — AUTO_VI$lineup_check","title":"Conduct a auto visual inference lineup check with a computer vision model — AUTO_VI$lineup_check","text":"function conducts visual inference lineup check computer vision model. result stored self$check_result.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lineup_check.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct a auto visual inference lineup check with a computer vision model — AUTO_VI$lineup_check","text":"","code":"AUTO_VI$lineup_check(   lineup_size = 20L,   fitted_model = self$fitted_model,   keras_model = self$keras_model,   null_method = self$null_method,   data = self$get_data(),   node_index = self$node_index,   extract_feature_from_layer = NULL )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lineup_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct a auto visual inference lineup check with a computer vision model — AUTO_VI$lineup_check","text":"lineup_size Integer. Number plots lineup. fitted_model Model. model object, e.g. lm. keras_model Keras model. trained computer vision model. null_method Function. method simulate residuals null hypothesis distribution. lm, recommended method residual rotation AUTO_VI$rotate_resid(). data Data frame. data used fit model. See also AUTO_VI$get_data(). node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. extract_feature_from_layer Character/Integer. layer name integer layer index extracting features layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lineup_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct a auto visual inference lineup check with a computer vision model — AUTO_VI$lineup_check","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lineup_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct a auto visual inference lineup check with a computer vision model — AUTO_VI$lineup_check","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$lineup_check()   myvi } #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 19 images. #> ✔ Predict visual signal strength for 1 image. #>  #> ── <AUTO_VI object> #> Status: #>  - Fitted model: lm #>  - Keras model: (None, 32, 32, 3) + (None, 5) -> (None, 1) #>     - Output node index: 1 #>  - Result: #>     - Observed visual signal strength: 3.162 (p-value = 0.05) #>     - Null visual signal strength: [19 draws] #>        - Mean: 1.279 #>        - Quantiles:  #>           ╔══════════════════════════════════════════╗ #>           ║  25%   50%   75%   80%   90%   95%   99% ║ #>           ║1.042 1.214 1.386 1.519 1.718 2.144 2.679 ║ #>           ╚══════════════════════════════════════════╝"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lr_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the likelihood ratio using the simulated result — AUTO_VI$lr_ratio","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$lr_ratio","text":"function estimates likelihood observing visual signal strength terms bootstrapped distribution simulated null distribution, computes ratio two likelihood.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lr_ratio.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$lr_ratio","text":"","code":"AUTO_VI$lr_ratio()"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-lr_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the likelihood ratio using the simulated result — AUTO_VI$lr_ratio","text":"named vector three elements boot_likelihood, null_likelihood lr_ratio.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get null residuals from a fitted model — AUTO_VI$null_method","title":"Get null residuals from a fitted model — AUTO_VI$null_method","text":"default method gets rotated residuals fitted linear model using AUTO_VI$rotate_resid. User needs override method fitted model linear regression model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_method.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get null residuals from a fitted model — AUTO_VI$null_method","text":"","code":"AUTO_VI$null_method(fitted_model = self$fitted_model)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get null residuals from a fitted model — AUTO_VI$null_method","text":"fitted_model lm. linear model object.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get null residuals from a fitted model — AUTO_VI$null_method","text":"tibble two columns .fitted .resid.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get null residuals from a fitted model — AUTO_VI$null_method","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) null_resid <- my_vi$null_method() my_vi$plot_resid(null_resid)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_vss.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate null plots and predict the visual signal strength — AUTO_VI$null_vss","title":"Simulate null plots and predict the visual signal strength — AUTO_VI$null_vss","text":"function simulates null plots null hypothesis distribution, predicts visual signal strength.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_vss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate null plots and predict the visual signal strength — AUTO_VI$null_vss","text":"","code":"AUTO_VI$null_vss(   draws = 100L,   fitted_model = self$fitted_model,   keras_model = self$keras_model,   null_method = self$null_method,   node_index = self$node_index,   keep_null_data = FALSE,   keep_null_plot = FALSE,   extract_feature_from_layer = NULL )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_vss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate null plots and predict the visual signal strength — AUTO_VI$null_vss","text":"draws Integer. Number simulation draws. fitted_model Model. model object, e.g. lm. keras_model Keras model. trained computer vision model. null_method Function. method simulate residuals null hypothesis distribution. lm, recommended method residual rotation AUTO_VI$rotate_resid(). node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. keep_null_data Boolean. Whether keep simulated null data. keep_null_plot Boolean. Whether keep simulated null plots. extract_feature_from_layer Character/Integer. layer name integer layer index extracting features layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_vss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate null plots and predict the visual signal strength — AUTO_VI$null_vss","text":"tibble.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-null_vss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate null plots and predict the visual signal strength — AUTO_VI$null_vss","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$null_vss() } #> ✔ Generate null data. #> ✔ Generate null plots. #> Computing auxiliary inputs ■■■■■■■■■■■■                      36% | ETA:  2s #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■■                      36% | ETA:  2s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> # A tibble: 100 × 1 #>      vss #>    <dbl> #>  1 1.89  #>  2 1.73  #>  3 1.30  #>  4 1.00  #>  5 1.75  #>  6 1.12  #>  7 2.58  #>  8 1.60  #>  9 0.892 #> 10 0.996 #> # ℹ 90 more rows"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the p-value based on the check result — AUTO_VI$p_value","title":"Compute the p-value based on the check result — AUTO_VI$p_value","text":"function computes p-value observing visual signal strength original residual plot based null distribution.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-p_value.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the p-value based on the check result — AUTO_VI$p_value","text":"","code":"AUTO_VI$p_value(   vss = self$check_result$observed$vss,   null_dist = self$check_result$null$vss )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the p-value based on the check result — AUTO_VI$p_value","text":"vss Numrice. single numeric value indicating visual signal strength true residual plot. null_dist Numeric. vector numeric values indicating visual signal strength null residual plots.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the p-value based on the check result — AUTO_VI$p_value","text":"numeric value representing desired p-value.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the p-value based on the check result — AUTO_VI$p_value","text":"","code":"vss <- 1 null_dist <- rnorm(100, 0, 1) AUTO_VI$p_value(vss, null_dist) #> [1] 0.2079208"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a lineup of standard residual plots — AUTO_VI$plot_lineup","title":"Draw a lineup of standard residual plots — AUTO_VI$plot_lineup","text":"function draws lineup standard residual plots consisting true residual plot several null residual plots.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_lineup.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a lineup of standard residual plots — AUTO_VI$plot_lineup","text":"","code":"AUTO_VI$plot_lineup(   lineup_size = 20L,   data = self$get_fitted_and_resid(),   null_method = self$null_method,   theme = ggplot2::theme_light(),   alpha = 1,   size = 0.5,   stroke = 0.5,   remove_axis = TRUE,   remove_legend = TRUE,   remove_grid_line = TRUE,   add_zero_line = TRUE,   remove_facet_label = FALSE,   display_answer = TRUE )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a lineup of standard residual plots — AUTO_VI$plot_lineup","text":"lineup_size Numeric. Number plots lineup. data Data frame. data frame containing variables .resid .fitted. See also AUTO_VI$get_fitted_and_resid(). null_method Function. function takes fitted model input, outputs data frame containing variables .resid .fitted. See also AUTO_VI$null_method(). theme ggtheme. ggplot theme object. See also ggplot2::theme_light(). alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. stroke Numeric. Stroke dot. Value 0 1. remove_axis Boolean. Whether remove axis. remove_legend Boolean. Whether remove legend. remove_grid_line Boolean. Whether remove grid lines. add_zero_line Boolean. Whether add zero horizontal line. remove_facet_label Boolean. Whether remove facet labels. display_answer Boolean. Whether display answer title.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a lineup of standard residual plots — AUTO_VI$plot_lineup","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a lineup of standard residual plots — AUTO_VI$plot_lineup","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$plot_lineup()"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a pair of standard residual plots — AUTO_VI$plot_pair","title":"Draw a pair of standard residual plots — AUTO_VI$plot_pair","text":"function draws pair standard residual plots consisting true residual plot null residual plot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_pair.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a pair of standard residual plots — AUTO_VI$plot_pair","text":"","code":"AUTO_VI$plot_pair(   data = self$get_fitted_and_resid(),   null_data = self$null_method(),   theme = ggplot2::theme_light(),   alpha = 1,   size = 0.5,   stroke = 0.5,   remove_axis = TRUE,   remove_legend = TRUE,   remove_grid_line = TRUE,   add_zero_line = TRUE )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a pair of standard residual plots — AUTO_VI$plot_pair","text":"data Data frame. data frame containing variables .resid .fitted. See also AUTO_VI$get_fitted_and_resid(). null_data Data frame. data frame containing variables .resid .fitted. See also AUTO_VI$null_method(). theme ggtheme. ggplot theme object. See also ggplot2::theme_light(). alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. stroke Numeric. Stroke dot. Value 0 1. remove_axis Boolean. Whether remove axis. remove_legend Boolean. Whether remove legend. remove_grid_line Boolean. Whether remove grid lines. add_zero_line Boolean. Whether add zero horizontal line.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a pair of standard residual plots — AUTO_VI$plot_pair","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a pair of standard residual plots — AUTO_VI$plot_pair","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$plot_pair()"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a standard residual plot — AUTO_VI$plot_resid","title":"Draw a standard residual plot — AUTO_VI$plot_resid","text":"function draws standard residual plot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_resid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a standard residual plot — AUTO_VI$plot_resid","text":"","code":"AUTO_VI$plot_resid(   data = self$get_fitted_and_resid(),   theme = ggplot2::theme_light(base_size = 11/5),   alpha = 1,   size = 0.5,   stroke = 0.5,   remove_axis = TRUE,   remove_legend = TRUE,   remove_grid_line = TRUE,   add_zero_line = TRUE )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a standard residual plot — AUTO_VI$plot_resid","text":"data Data frame. data frame containing variables .resid .fitted. See also AUTO_VI$get_fitted_and_resid(). theme ggtheme. ggplot theme object. See also ggplot2::theme_light(). alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. stroke Numeric. Stroke dot. Value 0 1. remove_axis Boolean. Whether remove axis. remove_legend Boolean. Whether remove legend. remove_grid_line Boolean. Whether remove grid lines. add_zero_line Boolean. Whether add zero horizontal line.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a standard residual plot — AUTO_VI$plot_resid","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-plot_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a standard residual plot — AUTO_VI$plot_resid","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) my_vi$plot_resid()"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-remove_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a plot — AUTO_VI$remove_plot","title":"Remove a plot — AUTO_VI$remove_plot","text":"function removes plot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-remove_plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a plot — AUTO_VI$remove_plot","text":"","code":"AUTO_VI$remove_plot(path, check_ext = TRUE)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-remove_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a plot — AUTO_VI$remove_plot","text":"path Character. Path image file. check_ext Boolean. Whether check file extension.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-remove_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a plot — AUTO_VI$remove_plot","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-remove_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a plot — AUTO_VI$remove_plot","text":"","code":"my_vi <- auto_vi(fitted_mod = lm(speed ~ dist, data = cars)) temp_path <- my_vi$save_plot(my_vi$plot_resid()) my_vi$remove_plot(temp_path) file.exists(temp_path) #> [1] FALSE"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-rotate_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rotated residuals from a fitted linear model — AUTO_VI$rotate_resid","title":"Get rotated residuals from a fitted linear model — AUTO_VI$rotate_resid","text":"function gets rotated residuals fitted linear model. rotated residuals generated first regressing random noises original regressors, multiply obtained residuals original RSS divided current RSS. results rotated residuals.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-rotate_resid.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rotated residuals from a fitted linear model — AUTO_VI$rotate_resid","text":"","code":"AUTO_VI$rotate_resid(fitted_model = self$fitted_mod)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-rotate_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rotated residuals from a fitted linear model — AUTO_VI$rotate_resid","text":"fitted_model lm. linear model object.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-rotate_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rotated residuals from a fitted linear model — AUTO_VI$rotate_resid","text":"tibble two columns .fitted .resid.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-rotate_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rotated residuals from a fitted linear model — AUTO_VI$rotate_resid","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) rotated_resid <- my_vi$rotate_resid() my_vi$plot_resid(rotated_resid)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-save_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a plot — AUTO_VI$save_plot","title":"Save a plot — AUTO_VI$save_plot","text":"default method saving plot. use save_plot() save ggplot 420 (width) * 525 (height) PNG file. trained images generated differently, one can override method using bandicoot::register_method().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-save_plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a plot — AUTO_VI$save_plot","text":"","code":"AUTO_VI$save_plot(p)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-save_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a plot — AUTO_VI$save_plot","text":"p ggplot. plot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-save_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a plot — AUTO_VI$save_plot","text":"image path.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-save_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a plot — AUTO_VI$save_plot","text":"","code":"my_vi <- auto_vi(fitted_model = lm(speed ~ dist, data = cars)) p <- my_vi$plot_resid() my_vi$save_plot(p) #> [1] \"/var/folders/61/bv7_1qzs20x6fjb2rsv7513r0000gn/T//RtmpHmOxwB/file77d04fab4b7.png\""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-select_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Select features from the check result — AUTO_VI$select_feature","title":"Select features from the check result — AUTO_VI$select_feature","text":"function select features check result.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-select_feature.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select features from the check result — AUTO_VI$select_feature","text":"","code":"AUTO_VI$feature_pca(data = self$check_result$observed, pattern = \"f_\")"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-select_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select features from the check result — AUTO_VI$select_feature","text":"data Dataframe. data frame columns represent features rows represent observations. pattern Character. regrex pattern search features. See also grep().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-select_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select features from the check result — AUTO_VI$select_feature","text":"tibble columns represent features rows represent observations.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-select_feature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select features from the check result — AUTO_VI$select_feature","text":"default, features assumed follow naming convention \"f_(index)\", index one number features.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-select_feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select features from the check result — AUTO_VI$select_feature","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$lineup_check(extract_feature_from_layer = \"global_max_pooling2d\")   myvi$select_feature() } #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 19 images. #> ✔ Predict visual signal strength for 1 image. #> # A tibble: 1 × 256 #>     f_1   f_2   f_3   f_4   f_5    f_6   f_7    f_8   f_9   f_10  f_11   f_12 #>   <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl> <dbl>  <dbl> <dbl>  <dbl> #> 1 0.151     0     0     0     0 0.0203 0.109 0.0203     0 0.0834     0 0.0572 #> # ℹ 244 more variables: f_13 <dbl>, f_14 <dbl>, f_15 <dbl>, f_16 <dbl>, #> #   f_17 <dbl>, f_18 <dbl>, f_19 <dbl>, f_20 <dbl>, f_21 <dbl>, f_22 <dbl>, #> #   f_23 <dbl>, f_24 <dbl>, f_25 <dbl>, f_26 <dbl>, f_27 <dbl>, f_28 <dbl>, #> #   f_29 <dbl>, f_30 <dbl>, f_31 <dbl>, f_32 <dbl>, f_33 <dbl>, f_34 <dbl>, #> #   f_35 <dbl>, f_36 <dbl>, f_37 <dbl>, f_38 <dbl>, f_39 <dbl>, f_40 <dbl>, #> #   f_41 <dbl>, f_42 <dbl>, f_43 <dbl>, f_44 <dbl>, f_45 <dbl>, f_46 <dbl>, #> #   f_47 <dbl>, f_48 <dbl>, f_49 <dbl>, f_50 <dbl>, f_51 <dbl>, f_52 <dbl>, …"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of the object — AUTO_VI$summary","title":"Summary of the object — AUTO_VI$summary","text":"AUTO_VI$..str..() method provides string representation object. check performed, string contain simple statistics check result. method thing AUTO_VI$..str..(), returns AUTO_VI_SUMMARY object stores statistics, sample quantiles distribution null visual signal strength, object.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of the object — AUTO_VI$summary","text":"","code":"AUTO_VI$summary()"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of the object — AUTO_VI$summary","text":"AUTO_VI_SUMMARY object.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of the object — AUTO_VI$summary","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$check()   myvi_summary <- myvi$summary()   print(myvi_summary)   names(myvi_summary) } #> ✔ Generate null data. #> ✔ Generate null plots. #> Computing auxiliary inputs ■■■■■■■■■■■                       34% | ETA:  2s #> Computing auxiliary inputs ■■■■■■■■■■■■■                     41% | ETA:  2s #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■■                      37% | ETA:  2s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> Warning: Problem in area computation (Returns NA) #> Computing auxiliary inputs ■■■■■■■■■■■■■■                    42% | ETA:  1s #> Warning: shull: complete hull invisible, data scaling error, will retry with some jitter #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■                       32% | ETA:  2s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> ✔ Predict visual signal strength for 1 image. #>  #> ── <AUTO_VI_SUMMARY object> #> Status: #>  - Fitted model: lm #>  - Keras model: (None, 32, 32, 3) + (None, 5) -> (None, 1) #>     - Output node index: 1 #>  - Result: #>     - Observed visual signal strength: 3.162 (p-value = 0.0297) #>     - Null visual signal strength: [100 draws] #>        - Mean: 1.339 #>        - Quantiles:  #>           ╔═════════════════════════════════════════════════╗ #>           ║   25%    50%    75%    80%    90%    95%    99% ║ #>           ║0.9071 1.1639 1.7182 1.8285 2.0214 2.2851 3.3232 ║ #>           ╚═════════════════════════════════════════════════╝ #>     - Bootstrapped visual signal strength: [100 draws] #>        - Mean: 2.725 (p-value = 0.0495) #>        - Quantiles:  #>           ╔══════════════════════════════════════════╗ #>           ║  25%   50%   75%   80%   90%   95%   99% ║ #>           ║2.427 2.902 3.189 3.246 3.326 3.438 3.534 ║ #>           ╚══════════════════════════════════════════╝ #>     - Likelihood ratio: 0.8071 (boot) / 0.03731 (null) = 21.63  #>  [1] \"null_likelihood\"  \"..method_env..\"   \"observed_vss\"     \"null_quantiles\"   #>  [5] \"del_attr\"         \"..mro..\"          \"..repr..\"         \"has_attr\"         #>  [9] \"boot_quantiles\"   \"null_draws\"       \"get_attr\"         \"boot_draws\"       #> [13] \"..instantiated..\" \"..class_tree..\"   \"..init..\"         \"..methods..\"      #> [17] \"boot_mean\"        \"boot_p_value\"     \"p_value\"          \"null_mean\"        #> [21] \"..class..\"        \"..type..\"         \"..dir..\"          \"..bases..\"        #> [25] \"boot_likelihood\"  \"..new..\"          \"..init_call..\"    \"set_attr\"         #> [29] \"..str..\"          \"summary_string\"   \"likelihood_ratio\" \"..len..\""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_density_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a summary density plot for the result — AUTO_VI$summary_density_plot","title":"Draw a summary density plot for the result — AUTO_VI$summary_density_plot","text":"function draws summary density plot result.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_density_plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a summary density plot for the result — AUTO_VI$summary_density_plot","text":"","code":"AUTO_VI$summary_plot(   vss = self$check_result$observed$vss,   null_dist = self$check_result$null$vss,   boot_dist = self$check_result$boot$vss,   p_value = self$check_result$p_value,   likelihood_ratio = self$check_result$likelihood_ratio,   density_alpha = 0.6 )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_density_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a summary density plot for the result — AUTO_VI$summary_density_plot","text":"vss Numeric. Observed visual signal strength. null_dist Numeric. Null visual signal strength. boot_dist Numeric. Bootstrapped visual signal strength. p_value Numeric. P-value visual test. See also AUTO_VI$p_value(). likelihood_ratio Numeric. Likelihood ratio visual test. See also AUTO_VI$likelihood_ratio(). density_alpha Numeric. Alpha value density.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_density_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a summary density plot for the result — AUTO_VI$summary_density_plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_density_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a summary density plot for the result — AUTO_VI$summary_density_plot","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$check()   myvi$summary_density_plot() } #> ✔ Generate null data. #> ✔ Generate null plots. #> Computing auxiliary inputs ■■■■■■■■■■■■                      37% | ETA:  2s #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    96% | ETA:  0s #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% | ETA:  0s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> ✔ Generate bootstrapped data. #> ✔ Generate bootstrapped plots. #> Warning: Problem in area computation (Returns NA) #> Warning: shull: complete hull invisible, data scaling error, will retry with some jitter #> Warning: shull: complete hull invisible, data scaling error, will retry with some jitter #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■          76% | ETA:  1s #> Warning: triangle collapsed! #> Warning: three points coincide or are collinear! #> Warning: Problem in area computation (Returns NA) #> Computing auxiliary inputs ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Compute auxilary inputs. #> Saving images ■■■■■■■■■■■■■■■■■■■■■■            70% | ETA:  1s #> Saving images ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> ✔ Predict visual signal strength for 100 images. #> ✔ Predict visual signal strength for 1 image."},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a summary plot for the result — AUTO_VI$summary_plot","title":"Draw a summary plot for the result — AUTO_VI$summary_plot","text":"function draws summary plot result.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a summary plot for the result — AUTO_VI$summary_plot","text":"","code":"AUTO_VI$summary_plot(type = \"auto\", ...)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a summary plot for the result — AUTO_VI$summary_plot","text":"type Character. Either \"auto\", \"density\" \"rank\". Option \"auto\" use Boolean flag self$check_result$lineup_check determine correct option. See also AUTO_VI$summary_density_plot() AUTO_VI$summary_rank_plot(). ... Arguments passed AUTO_VI$summary_density_plot() AUTO_VI$summary_rank_plot().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a summary plot for the result — AUTO_VI$summary_plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a summary plot for the result — AUTO_VI$summary_plot","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$lineup_check()   myvi$summary_plot() } #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 19 images. #> ✔ Predict visual signal strength for 1 image."},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_rank_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a summary rank plot for the result — AUTO_VI$summary_rank_plot","title":"Draw a summary rank plot for the result — AUTO_VI$summary_rank_plot","text":"function draws summary rank plot result.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_rank_plot.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a summary rank plot for the result — AUTO_VI$summary_rank_plot","text":"","code":"AUTO_VI$summary_plot(   vss = self$check_result$observed$vss,   null_dist = self$check_result$null$vss,   p_value = self$check_result$p_value )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_rank_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a summary rank plot for the result — AUTO_VI$summary_rank_plot","text":"vss Numeric. Observed visual signal strength. null_dist Numeric. Null visual signal strength. p_value Numeric. P-value visual test. See also AUTO_VI$p_value().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_rank_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a summary rank plot for the result — AUTO_VI$summary_rank_plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-summary_rank_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a summary rank plot for the result — AUTO_VI$summary_rank_plot","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$lineup_check()   myvi$summary_rank_plot() } #> ✔ Generate null data. #> ✔ Generate null plots. #> ✔ Compute auxilary inputs. #> ✔ Predict visual signal strength for 19 images. #> ✔ Predict visual signal strength for 1 image."},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-unique_obs_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the adjustment factor for the reduction of the number of\nunique observations — AUTO_VI$unique_obs_correction","title":"Compute the adjustment factor for the reduction of the number of\nunique observations — AUTO_VI$unique_obs_correction","text":"function computes adjustment factor reduction number unique observations. bootstrap data refit model, residual plot usually less observations due sampling replacement. visual signal strength plot also decrease. correct effect, can scale visual signal strength based unique number observations bootstrapped data.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-unique_obs_correction.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the adjustment factor for the reduction of the number of\nunique observations — AUTO_VI$unique_obs_correction","text":"","code":"AUTO_VI$unique_obs_correction(vss, overlap_ratio)"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-unique_obs_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the adjustment factor for the reduction of the number of\nunique observations — AUTO_VI$unique_obs_correction","text":"vss Numeric. Visual signal strength. overlap_ratio. Numeric. value 0 1 indicating percentage original observations presenting bootstrapped data.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-unique_obs_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the adjustment factor for the reduction of the number of\nunique observations — AUTO_VI$unique_obs_correction","text":"numeric value representing adjusted visual signal strength.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-unique_obs_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the adjustment factor for the reduction of the number of\nunique observations — AUTO_VI$unique_obs_correction","text":"","code":"AUTO_VI$unique_obs_correction(1, 2/3) #> [1] 1.274643"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-vss.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the visual signal strength — AUTO_VI$vss","title":"Predict the visual signal strength — AUTO_VI$vss","text":"function predicts visual signal strength.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-vss.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the visual signal strength — AUTO_VI$vss","text":"","code":"AUTO_VI$vss(   p = self$plot_resid(),   auxiliary = NULL,   keras_model = self$keras_model,   node_index = self$node_index,   extract_feature_from_layer = NULL )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-vss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the visual signal strength — AUTO_VI$vss","text":"p ggplot/List/Data.frame/Array/Numpy array/String. input can ggplot, list ggplot, data.frame containing .resid (residuals) .fitted (fitted values) can passed AUTO_VI$plot_resid(), 3D array representing image, 4D array representing one images, path image, vector list paths images, numpy array. auxiliary Dataframe. dataframe auxiliary values. used keras model multiple inputs. provided, values automatically computed based residual plot fitted model. See also AUTO_VI$auxiliary(). keras_model Keras model. trained computer vision model. node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. extract_feature_from_layer Character/Integer. layer name integer layer index extracting features layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-vss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the visual signal strength — AUTO_VI$vss","text":"tibble. first column vss prediction, rest columns features extracted layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI-cash-vss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the visual signal strength — AUTO_VI$vss","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   myvi <- auto_vi(lm(dist ~ speed, data = cars), keras_model)    myvi$vss() } #> ✔ Predict visual signal strength for 1 image. #> # A tibble: 1 × 1 #>     vss #>   <dbl> #> 1  3.16"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":null,"dir":"Reference","previous_headings":"","what":"AUTO_VI class environment — AUTO_VI","title":"AUTO_VI class environment — AUTO_VI","text":"class auto visual inference, inherited bandicoot::BASE. environment S3 class bandicoot_oop.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUTO_VI class environment — AUTO_VI","text":"","code":"auto_vi(   fitted_model,   keras_model = NULL,   data = NULL,   node_index = 1L,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  residual_checker(   fitted_model,   keras_model_name = \"vss_phn_32\",   data = NULL,   node_index = 1L,   env = new.env(parent = parent.frame()),   init_call = sys.call() )"},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUTO_VI class environment — AUTO_VI","text":"fitted_model Model. model object, e.g. lm. keras_model Keras model. trained computer vision model. data Data frame. data used fit model. node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. env Environment. instance environment. init_call Call. Contents ..init_call... recommended leave default. keras_model_name Character. model name used get_keras_model(). See also list_keras_model().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUTO_VI class environment — AUTO_VI","text":"instance environment.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"AUTO_VI class environment — AUTO_VI","text":"auto_vi(): Class constructor, AUTO_VI$instantiate(). residual_checker(): Class constructor, AUTO_VI$instantiate(), uses keras_model_name argument rather keras_model.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"parent-classes","dir":"Reference","previous_headings":"","what":"Parent classes","title":"AUTO_VI class environment — AUTO_VI","text":"Direct: bandicoot::BASE","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"new-attributes","dir":"Reference","previous_headings":"","what":"New attributes","title":"AUTO_VI class environment — AUTO_VI","text":"C: AUTO_VI$check_result","code":""},{"path":"https://tengmcing.github.io/autovi/reference/AUTO_VI.html","id":"new-methods","dir":"Reference","previous_headings":"","what":"New methods","title":"AUTO_VI class environment — AUTO_VI","text":": AUTO_VI$auxiliary() B: AUTO_VI$boot_method() AUTO_VI$boot_vss() C: AUTO_VI$check() F: AUTO_VI$feature_pca() AUTO_VI$feature_pca_plot() G: AUTO_VI$get_data() AUTO_VI$get_fitted_and_resid() : AUTO_VI$..init..() L: AUTO_VI$lineup_check() AUTO_VI$likelihood_ratio() N: AUTO_VI$null_method() AUTO_VI$null_vss() P: AUTO_VI$p_value() AUTO_VI$plot_pair() AUTO_VI$plot_lineup() AUTO_VI$plot_resid() R: AUTO_VI$rotate_resid() S: AUTO_VI$save_plot() AUTO_VI$..str..() AUTO_VI$summary() AUTO_VI$summary_density_plot() AUTO_VI$summary_plot() AUTO_VI$summary_rank_plot() V: AUTO_VI$vss()","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — KERAS_WRAPPER$..init..","title":"Initialization method — KERAS_WRAPPER$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..init...html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization method — KERAS_WRAPPER$..init..","text":"","code":"KERAS_WRAPPER$..init..(keras_mod = NULL, node_index = 1L)"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — KERAS_WRAPPER$..init..","text":"keras_mod Keras model. trained computer vision model. node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — KERAS_WRAPPER$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — KERAS_WRAPPER$..init..","text":"","code":"keras_wrapper() #>  #> ── <KERAS_WRAPPER object> #> Status: #>  - Keras model: UNKNOWN #>     - Output node index: 1"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — KERAS_WRAPPER$..str..","title":"String representation of the object — KERAS_WRAPPER$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..str...html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String representation of the object — KERAS_WRAPPER$..str..","text":"","code":"KERAS_WRAPPER$..str..()"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — KERAS_WRAPPER$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — KERAS_WRAPPER$..str..","text":"","code":"KERAS_WRAPPER$..str..() #> [1] \"<KERAS_WRAPPER class>\"  wrapper <- keras_wrapper() wrapper$..str..() #> [1] \"<KERAS_WRAPPER object>\\n Status:\\n  - Keras model: UNKNOWN\\n     - Output node index: 1\""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_height.html","id":null,"dir":"Reference","previous_headings":"","what":"Get keras model input image height — KERAS_WRAPPER$get_input_height","title":"Get keras model input image height — KERAS_WRAPPER$get_input_height","text":"function get input image height (input shape (batch_size, height, width, channels)) keras model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_height.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get keras model input image height — KERAS_WRAPPER$get_input_height","text":"","code":"KERAS_WRAPPER$get_input_height(keras_model = self$keras_model)"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_height.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get keras model input image height — KERAS_WRAPPER$get_input_height","text":"keras_model Keras model. trained computer vision model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_height.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get keras model input image height — KERAS_WRAPPER$get_input_height","text":"integer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_height.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get keras model input image height — KERAS_WRAPPER$get_input_height","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   keras_wrapper(keras_model)$get_input_height() } #> [1] 32"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Get keras model input image width — KERAS_WRAPPER$get_input_width","title":"Get keras model input image width — KERAS_WRAPPER$get_input_width","text":"function get input image width (input shape (batch_size, height, width, channels)) keras model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_width.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get keras model input image width — KERAS_WRAPPER$get_input_width","text":"","code":"KERAS_WRAPPER$get_input_width(keras_model = self$keras_model)"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get keras model input image width — KERAS_WRAPPER$get_input_width","text":"keras_model Keras model. trained computer vision model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get keras model input image width — KERAS_WRAPPER$get_input_width","text":"integer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-get_input_width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get keras model input image width — KERAS_WRAPPER$get_input_width","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   keras_wrapper(keras_model)$get_input_width() } #> [1] 32"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-image_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an image as numpy array — KERAS_WRAPPER$image_to_array","title":"Load an image as numpy array — KERAS_WRAPPER$image_to_array","text":"function loads image file convert numpy array.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-image_to_array.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an image as numpy array — KERAS_WRAPPER$image_to_array","text":"","code":"KERAS_WRAPPER$image_to_array(   path,   height = self$get_input_height(),   width = self$get_input_width() )"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-image_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an image as numpy array — KERAS_WRAPPER$image_to_array","text":"path Character. Path image. height Integer. Target height image. width Integer. Target width image.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-image_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an image as numpy array — KERAS_WRAPPER$image_to_array","text":"numpy array.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-image_to_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an image as numpy array — KERAS_WRAPPER$image_to_array","text":"","code":"p <- ggplot2::ggplot(cars) + ggplot2::geom_point(ggplot2::aes(dist, speed)) path <- save_plot(p) result <- try(KERAS_WRAPPER$image_to_array(path, 32L, 32L)) if (!inherits(result, \"try-error\")) {   result } #> array},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-list_layer_name.html","id":null,"dir":"Reference","previous_headings":"","what":"List all layer names — KERAS_WRAPPER$list_layer_name","title":"List all layer names — KERAS_WRAPPER$list_layer_name","text":"function list layer names keras model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-list_layer_name.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all layer names — KERAS_WRAPPER$list_layer_name","text":"","code":"KERAS_WRAPPER$list_layer_name(keras_model = self$keras_model)"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-list_layer_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all layer names — KERAS_WRAPPER$list_layer_name","text":"keras_model Keras model. trained computer vision model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-list_layer_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all layer names — KERAS_WRAPPER$list_layer_name","text":"vector strings.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-list_layer_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all layer names — KERAS_WRAPPER$list_layer_name","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   keras_wrapper(keras_model)$list_layer_name() } #>  [1] \"input_1\"                  \"tf.__operators__.getitem\" #>  [3] \"tf.nn.bias_add\"           \"grey_scale\"               #>  [5] \"block1_conv1\"             \"batch_normalization\"      #>  [7] \"activation\"               \"block1_conv2\"             #>  [9] \"batch_normalization_1\"    \"activation_1\"             #> [11] \"block1_pool\"              \"dropout\"                  #> [13] \"block2_conv1\"             \"batch_normalization_2\"    #> [15] \"activation_2\"             \"block2_conv2\"             #> [17] \"batch_normalization_3\"    \"activation_3\"             #> [19] \"block2_pool\"              \"dropout_1\"                #> [21] \"block3_conv1\"             \"batch_normalization_4\"    #> [23] \"activation_4\"             \"block3_conv2\"             #> [25] \"batch_normalization_5\"    \"activation_5\"             #> [27] \"block3_conv3\"             \"batch_normalization_6\"    #> [29] \"activation_6\"             \"block3_pool\"              #> [31] \"dropout_2\"                \"block4_conv1\"             #> [33] \"batch_normalization_7\"    \"activation_7\"             #> [35] \"block4_conv2\"             \"batch_normalization_8\"    #> [37] \"activation_8\"             \"block4_conv3\"             #> [39] \"batch_normalization_9\"    \"activation_9\"             #> [41] \"block4_pool\"              \"dropout_3\"                #> [43] \"block5_conv1\"             \"batch_normalization_10\"   #> [45] \"activation_10\"            \"block5_conv2\"             #> [47] \"batch_normalization_11\"   \"activation_11\"            #> [49] \"block5_conv3\"             \"batch_normalization_12\"   #> [51] \"activation_12\"            \"block5_pool\"              #> [53] \"dropout_4\"                \"global_max_pooling2d\"     #> [55] \"additional_input\"         \"concatenate\"              #> [57] \"dense\"                    \"dropout_5\"                #> [59] \"activation_13\"            \"dense_1\""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict visual signal strength — KERAS_WRAPPER$predict","title":"Predict visual signal strength — KERAS_WRAPPER$predict","text":"function predicts visual signal strength using provided keras model, input array optional auxiliary input array.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-predict.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict visual signal strength — KERAS_WRAPPER$predict","text":"","code":"KERAS_WRAPPER$predict(   input_array,   auxiliary = NULL,   keras_model = self$keras_model,   node_index = self$node_index,   extract_featrue_from_layer = NULL )"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict visual signal strength — KERAS_WRAPPER$predict","text":"input_array Array/Numpy array. input array, usually shape (batch_size, height, width, channels). auxiliary Array/Data frame. auxiliary input array shape (batch_size, number_of_auxiliary_inputs). needed keras model takes multiple inputs. keras_model Keras model. trained computer vision model. node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. extract_feature_from_layer Character/Integer. layer name integer layer index extracting features layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict visual signal strength — KERAS_WRAPPER$predict","text":"tibble. first column vss prediction, rest columns features extracted layer.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER-cash-predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict visual signal strength — KERAS_WRAPPER$predict","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) {   wrapper <- keras_wrapper(keras_model)    # Provide one 32 * 32 RGB image and one vector of length 5 as input   wrapper$predict(input_array = array(255, dim = c(1, 32, 32, 3)),                   auxiliary = matrix(1, ncol = 5)) } #> ✔ Predict visual signal strength for 1 image. #> # A tibble: 1 × 1 #>     vss #>   <dbl> #> 1  3.21"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":null,"dir":"Reference","previous_headings":"","what":"KERAS_WRAPPER class environment — KERAS_WRAPPER","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"class keras wrapper, inherited bandicoot::BASE. environment S3 class bandicoot_oop.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"","code":"keras_wrapper(   keras_model = NULL,   node_index = 1L,   env = new.env(parent = parent.frame()),   init_call = sys.call() )"},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"keras_model Keras model. trained computer vision model. node_index Integer. index indicating node output layer contains visual signal strength. particularly useful keras model one output nodes. env Environment. instance environment. init_call Call. Contents ..init_call... recommended leave default.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"instance environment.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"keras_wrapper(): Class constructor, KERAS_WRAPPER$instantiate().","code":""},{"path":[]},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":"parent-classes","dir":"Reference","previous_headings":"","what":"Parent classes","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"Direct: bandicoot::BASE","code":""},{"path":"https://tengmcing.github.io/autovi/reference/KERAS_WRAPPER.html","id":"new-methods","dir":"Reference","previous_headings":"","what":"New methods","title":"KERAS_WRAPPER class environment — KERAS_WRAPPER","text":"G: KERAS_WRAPPER$get_input_height() KERAS_WRAPPER$get_input_width() : KERAS_WRAPPER$image_to_array() KERAS_WRAPPER$..init..() L: KERAS_WRAPPER$list_layer_name() P: KERAS_WRAPPER$predict() S: KERAS_WRAPPER$..str..()","code":""},{"path":"https://tengmcing.github.io/autovi/reference/check_python_library_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check python library availability — check_python_library_available","title":"Check python library availability — check_python_library_available","text":"function checks python library available. library can found importlib.util.find_spec method, error throw.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/check_python_library_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check python library availability — check_python_library_available","text":"","code":"check_python_library_available(lib_name)"},{"path":"https://tengmcing.github.io/autovi/reference/check_python_library_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check python library availability — check_python_library_available","text":"lib_name Character. library name.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/check_python_library_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check python library availability — check_python_library_available","text":"return. Called side-effect.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/check_python_library_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check python library availability — check_python_library_available","text":"","code":"try(check_python_library_available(\"numpy\"))"},{"path":"https://tengmcing.github.io/autovi/reference/get_keras_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and load the keras model — get_keras_model","title":"Download and load the keras model — get_keras_model","text":"functions download keras model TengMCing/autovi_data Github repo using download.file() load model using reticulate::import(\"tensorflow\")$keras$models$load_model. Note tensorflow version greater 2.15 supported.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/get_keras_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and load the keras model — get_keras_model","text":"","code":"get_keras_model(model_name, format = \"SavedModel\")"},{"path":"https://tengmcing.github.io/autovi/reference/get_keras_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and load the keras model — get_keras_model","text":"model_name String. model name. See also list_keras_model(). format String. model format download. Either \"SavedModel\" \"keras\".","code":""},{"path":"https://tengmcing.github.io/autovi/reference/get_keras_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and load the keras model — get_keras_model","text":"keras model.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/get_keras_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and load the keras model — get_keras_model","text":"","code":"keras_model <- try(get_keras_model(\"vss_phn_32\")) if (!inherits(keras_model, \"try-error\")) keras_model$summary()"},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_model.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available pre-trained computer vision models — list_keras_model","title":"List all available pre-trained computer vision models — list_keras_model","text":"function gets table available pre-trained computer vision models predicting visual signal strength.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available pre-trained computer vision models — list_keras_model","text":"","code":"list_keras_model()"},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available pre-trained computer vision models — list_keras_model","text":"tibble available model names paths.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available pre-trained computer vision models — list_keras_model","text":"","code":"list_keras_model() #> # A tibble: 6 × 9 #>   model_name  path              volume_path volume_size input_height input_width #>   <chr>       <chr>             <chr>             <int>        <int>       <int> #> 1 vss_32      keras_model/vss_… keras_mode…           4           32          32 #> 2 vss_64      keras_model/vss_… keras_mode…           1           64          64 #> 3 vss_128     keras_model/vss_… keras_mode…           8          128         128 #> 4 vss_phn_32  keras_model/vss_… keras_mode…           2           32          32 #> 5 vss_phn_64  keras_model/vss_… keras_mode…           8           64          64 #> 6 vss_phn_128 keras_model/vss_… keras_mode…           8          128         128 #> # ℹ 3 more variables: input_channels <int>, auxiliary_input_size <int>, #> #   description <chr>"},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_models.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available pre-trained computer vision models — list_keras_models","title":"List all available pre-trained computer vision models — list_keras_models","text":"function gets table available pre-trained computer vision models predicting visual signal strength.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available pre-trained computer vision models — list_keras_models","text":"","code":"list_keras_models()"},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available pre-trained computer vision models — list_keras_models","text":"tibble available model names paths.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/list_keras_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available pre-trained computer vision models — list_keras_models","text":"","code":"list_keras_models() #> # A tibble: 6 × 7 #>   model_name  path  input_height input_width input_channels auxiliary_input_size #>   <chr>       <chr>        <int>       <int>          <int>                <int> #> 1 vss_32      kera…           32          32              3                    0 #> 2 vss_64      kera…           64          64              3                    0 #> 3 vss_128     kera…          128         128              3                    0 #> 4 vss_phn_32  kera…           32          32              3                    5 #> 5 vss_phn_64  kera…           64          64              3                    5 #> 6 vss_phn_128 kera…          128         128              3                    5 #> # ℹ 1 more variable: description <chr>"},{"path":"https://tengmcing.github.io/autovi/reference/portal.html","id":null,"dir":"Reference","previous_headings":"","what":"Portals to class instantiate methods — portal","title":"Portals to class instantiate methods — portal","text":"functions class$instantiate.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/portal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portals to class instantiate methods — portal","text":"","code":"auto_vi(..., env = new.env(parent = parent.frame()), init_call = sys.call())"},{"path":"https://tengmcing.github.io/autovi/reference/portal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portals to class instantiate methods — portal","text":"... Arguments passed init method. env Environment. instance environment. init_call Call. Contents ..init_call... recommended leave default. Default init_call = sys.call().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/portal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Portals to class instantiate methods — portal","text":"auto_vi(): AUTO_VI","code":""},{"path":"https://tengmcing.github.io/autovi/reference/remove_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a plot — remove_plot","title":"Remove a plot — remove_plot","text":"function removes plot provided path.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/remove_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a plot — remove_plot","text":"","code":"remove_plot(path, check_ext = TRUE)"},{"path":"https://tengmcing.github.io/autovi/reference/remove_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a plot — remove_plot","text":"path Character. Path image. check_ext Boolean. Whether check file extension.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/remove_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a plot — remove_plot","text":"return. Called side-effect.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/remove_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a plot — remove_plot","text":"","code":"p <- ggplot2::ggplot(cars) + ggplot2::geom_point(ggplot2::aes(dist, speed)) path <- save_plot(p) remove_plot(path)"},{"path":"https://tengmcing.github.io/autovi/reference/save_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a plot — save_plot","title":"Save a plot — save_plot","text":"function save plot provided path.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/save_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a plot — save_plot","text":"","code":"save_plot(p, path = NULL, width = 7/5, height = 7/4, ...)"},{"path":"https://tengmcing.github.io/autovi/reference/save_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a plot — save_plot","text":"p ggplot. plot. path Character. Path save image. width Numeric. Width image. height Numeric. Height image. ... arguments passed ggplot2::ggsave().","code":""},{"path":"https://tengmcing.github.io/autovi/reference/save_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a plot — save_plot","text":"image path.","code":""},{"path":"https://tengmcing.github.io/autovi/reference/save_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a plot — save_plot","text":"","code":"p <- ggplot2::ggplot(cars) + ggplot2::geom_point(ggplot2::aes(dist, speed)) save_plot(p) #> [1] \"/var/folders/61/bv7_1qzs20x6fjb2rsv7513r0000gn/T//RtmpHmOxwB/file77d06a38b0f7.png\""},{"path":[]},{"path":"https://tengmcing.github.io/autovi/news/index.html","id":"new-features-0-4-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"autovi 0.4.1","text":"Introduce AUTO_VI$save_plot() default method saving plot calling save_plot(). allows user override plot saving method needed. Introduce method AUTO_VI$summary() allows user get computed statistics provided AUTO_VI$..str..(). Introduce method AUTO_VI$plot_pair() allows user put true residual plot null plot side--side. Introduce method AUTO_VI$plot_lineup() allows user generate lineup manual inspection. Introduce AUTO_VI$boot_method() default method generating bootstrapped residuals. allows user override bootstrapping scheme needed. Introduce residual_checker() new class constructor AUTO_VI. argument keras_model_name passed get_keras_model().","code":""},{"path":"https://tengmcing.github.io/autovi/news/index.html","id":"changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"autovi 0.4.1","text":"Integrate AUTO_VI$select_feature() method AUTO_VI$feature_pca() clarity. Now AUTO_VI$feature_pca() method one parameter pattern specifying feature name pattern. Remove type parameter p_value_type parameter AUTO_VI$p_value() AUTO_VI$check(), respectively, unify p-value formula. Now p-value always calculated mean(c(null_dist, vss) >= vss), null_dist vector visual signal strength null residual plots, vss visual signal strength true residual plot. Improve AUTO_VI$feature_pca_plot(). Now observed point always displayed top groups. AUTO_VI$check() AUTO_VI$lineup_check() now returns self instead invisible(self) provide visible summary check result. get_keras_model() now downloads models TensorFlow “SavedModel” format default, rather .keras format. change may slow model loading process due larger file size, ensures better backward compatibility various Python TensorFlow versions. User can still choose download .keras format using format argument.","code":""},{"path":"https://tengmcing.github.io/autovi/news/index.html","id":"bug-fix-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"autovi 0.4.1","text":"Fix bug AUTO_VI$vss() arguments passed incorrectly KERAS_WRAPPER$image_to_array() data.frame tibble provided user predict visual signal strength.","code":""},{"path":"https://tengmcing.github.io/autovi/news/index.html","id":"autovi-040","dir":"Changelog","previous_headings":"","what":"autovi 0.4.0","title":"autovi 0.4.0","text":"CRAN release: 2024-06-25 First CRAN release","code":""}]
